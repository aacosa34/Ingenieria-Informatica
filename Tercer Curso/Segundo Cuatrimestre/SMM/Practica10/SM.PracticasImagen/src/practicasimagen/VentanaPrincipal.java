/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practicasimagen;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.SpinnerNumberModel;
import javax.swing.SpinnerModel;
import sm.aas.comboboxcolores.ColorCellRender;
import sm.aas.eventos.LienzoAdapter;
import sm.aas.eventos.LienzoEvent;
import static sm.aas.ui.Lienzo2D.Formas;
import sm.image.ImageTools;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
/**
 *
 * @author adri
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private boolean barraEstadoActiva = true;
    private ManejadorVentanaInterna mvi;
    private ManejadorLienzo mlienzo;
    private Formas formaActiva;
    private BufferedImage imgFuente;

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        mvi = new ManejadorVentanaInterna();
        mlienzo = new ManejadorLienzo();
        this.setSize(1600, 900);
        this.setTitle("Paint Basico");
        formaActiva = Formas.TRAZO_LIBRE;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        herramientas = new javax.swing.ButtonGroup();
        barraHerramientas = new javax.swing.JToolBar();
        botonNuevoLienzo = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        botonVolcado = new javax.swing.JToggleButton();
        botonTrazoLibre = new javax.swing.JToggleButton();
        botonLinea = new javax.swing.JToggleButton();
        botonRectangulo = new javax.swing.JToggleButton();
        botonElipse = new javax.swing.JToggleButton();
        botonCurva = new javax.swing.JToggleButton();
        botonMover = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        Color colores[] = {Color.BLACK, Color.RED, Color.BLUE, Color.ORANGE, Color.YELLOW, Color.GREEN};
        seleccionColor = new javax.swing.JComboBox<>(colores);
        jSeparator3 = new javax.swing.JToolBar.Separator();
        SpinnerModel valor = new SpinnerNumberModel(1,1,20,1);
        grosorSpinner = new javax.swing.JSpinner(valor);
        botonRelleno = new javax.swing.JToggleButton();
        botonTransparencia = new javax.swing.JToggleButton();
        botonAlisado = new javax.swing.JToggleButton();
        listaFiguras = new javax.swing.JComboBox<>();
        panelAuxiliar = new javax.swing.JPanel();
        panelInferior = new javax.swing.JPanel();
        labelEstado = new javax.swing.JLabel();
        barraImagenes = new javax.swing.JToolBar();
        panelBrilloContraste = new javax.swing.JPanel();
        contrasteSlider = new javax.swing.JSlider();
        brilloSlider = new javax.swing.JSlider();
        panelFiltros = new javax.swing.JPanel();
        comboFiltros = new javax.swing.JComboBox<>();
        filtroSlider = new javax.swing.JSlider();
        panelTransformaciones = new javax.swing.JPanel();
        botonContraste = new javax.swing.JButton();
        botonLuminosidad = new javax.swing.JButton();
        botonOscurecer = new javax.swing.JButton();
        botonCuadratica = new javax.swing.JButton();
        botonTrapezoidal = new javax.swing.JToggleButton();
        spinnerA = new javax.swing.JSpinner();
        spinnerB = new javax.swing.JSpinner();
        panelRotacionEscalado = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        bRotar90 = new javax.swing.JButton();
        bRotar180 = new javax.swing.JButton();
        bRotar270 = new javax.swing.JButton();
        bDisminuir = new javax.swing.JButton();
        bAumentar = new javax.swing.JButton();
        escritorio = new javax.swing.JDesktopPane();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuNuevo = new javax.swing.JMenuItem();
        menuAbrir = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        menuEdicion = new javax.swing.JMenu();
        menuVerBarraEstado = new javax.swing.JMenuItem();
        menuImagen = new javax.swing.JMenu();
        menuRescaleOp = new javax.swing.JMenuItem();
        menuConvolveOp = new javax.swing.JMenuItem();
        menuAffineTransformOp = new javax.swing.JMenuItem();
        menuLookupOp = new javax.swing.JMenuItem();
        menuBandCombineOp = new javax.swing.JMenuItem();
        menuColorConvertOp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        barraHerramientas.setRollover(true);

        botonNuevoLienzo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        botonNuevoLienzo.setToolTipText("Abre una nueva ventana");
        botonNuevoLienzo.setFocusable(false);
        botonNuevoLienzo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNuevoLienzo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNuevoLienzo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoLienzoActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonNuevoLienzo);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        botonAbrir.setToolTipText("Abrir una ventana a partir de una imagen");
        botonAbrir.setFocusable(false);
        botonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonAbrir);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        botonGuardar.setToolTipText("Guardar la ventana actual en un archivo");
        botonGuardar.setFocusable(false);
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonGuardar);
        barraHerramientas.add(jSeparator1);

        botonVolcado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/icons8-rodillo-24.png"))); // NOI18N
        botonVolcado.setFocusable(false);
        botonVolcado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonVolcado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonVolcado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVolcadoActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonVolcado);

        herramientas.add(botonTrazoLibre);
        botonTrazoLibre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/trazo.png"))); // NOI18N
        botonTrazoLibre.setSelected(true);
        botonTrazoLibre.setToolTipText("Trazo libre");
        botonTrazoLibre.setFocusable(false);
        botonTrazoLibre.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonTrazoLibre.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonTrazoLibre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTrazoLibreActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonTrazoLibre);

        herramientas.add(botonLinea);
        botonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        botonLinea.setToolTipText("Linea");
        botonLinea.setFocusable(false);
        botonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLineaActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonLinea);

        herramientas.add(botonRectangulo);
        botonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        botonRectangulo.setToolTipText("Rect√°ngulo");
        botonRectangulo.setFocusable(false);
        botonRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRectanguloActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonRectangulo);

        herramientas.add(botonElipse);
        botonElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        botonElipse.setToolTipText("Elipse");
        botonElipse.setFocusable(false);
        botonElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonElipseActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonElipse);

        herramientas.add(botonCurva);
        botonCurva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/curva.png"))); // NOI18N
        botonCurva.setToolTipText("Curva con tres puntos");
        botonCurva.setFocusable(false);
        botonCurva.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCurva.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCurva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCurvaActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonCurva);

        botonMover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        botonMover.setToolTipText("Activar/Desactivar desplazamiento de las figuras");
        botonMover.setFocusable(false);
        botonMover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonMover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonMover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMoverActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonMover);
        barraHerramientas.add(jSeparator2);

        seleccionColor.setToolTipText("Selecci√≥n de color");
        seleccionColor.setRenderer(new ColorCellRender());
        seleccionColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionColorActionPerformed(evt);
            }
        });
        barraHerramientas.add(seleccionColor);
        barraHerramientas.add(jSeparator3);

        grosorSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                grosorSpinnerStateChanged(evt);
            }
        });
        barraHerramientas.add(grosorSpinner);

        botonRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        botonRelleno.setToolTipText("Activar/Desactivar rellenado de figuras");
        botonRelleno.setFocusable(false);
        botonRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRellenoActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonRelleno);

        botonTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        botonTransparencia.setToolTipText("Activar/Desactivar transparencia en las figuras");
        botonTransparencia.setFocusable(false);
        botonTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTransparenciaActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonTransparencia);

        botonAlisado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        botonAlisado.setToolTipText("Activar/Desactivar alisado");
        botonAlisado.setFocusable(false);
        botonAlisado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAlisado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAlisado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAlisadoActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonAlisado);
        barraHerramientas.add(listaFiguras);

        getContentPane().add(barraHerramientas, java.awt.BorderLayout.PAGE_START);

        panelAuxiliar.setLayout(new java.awt.BorderLayout());

        panelInferior.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelInferior.setLayout(new java.awt.BorderLayout());

        labelEstado.setText("Barra de estado");
        labelEstado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelInferior.add(labelEstado, java.awt.BorderLayout.CENTER);

        panelBrilloContraste.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo y contraste"));
        panelBrilloContraste.setRequestFocusEnabled(false);
        panelBrilloContraste.setLayout(new java.awt.BorderLayout());

        contrasteSlider.setMaximum(20);
        contrasteSlider.setValue(10);
        contrasteSlider.setPreferredSize(new java.awt.Dimension(80, 40));
        contrasteSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                contrasteSliderStateChanged(evt);
            }
        });
        contrasteSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                contrasteSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                contrasteSliderFocusLost(evt);
            }
        });
        panelBrilloContraste.add(contrasteSlider, java.awt.BorderLayout.EAST);

        brilloSlider.setMaximum(255);
        brilloSlider.setMinimum(-255);
        brilloSlider.setValue(0);
        brilloSlider.setPreferredSize(new java.awt.Dimension(80, 40));
        brilloSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloSliderStateChanged(evt);
            }
        });
        brilloSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloSliderFocusLost(evt);
            }
        });
        panelBrilloContraste.add(brilloSlider, java.awt.BorderLayout.WEST);

        barraImagenes.add(panelBrilloContraste);

        panelFiltros.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros"));

        comboFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Laplaciana", "Relieve", "Enfoque", "SobelX", "SobelY" }));
        comboFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFiltrosActionPerformed(evt);
            }
        });
        panelFiltros.add(comboFiltros);

        filtroSlider.setMaximum(31);
        filtroSlider.setMinimum(1);
        filtroSlider.setToolTipText("");
        filtroSlider.setValue(1);
        filtroSlider.setPreferredSize(new java.awt.Dimension(80, 30));
        filtroSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                filtroSliderStateChanged(evt);
            }
        });
        filtroSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                filtroSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                filtroSliderFocusLost(evt);
            }
        });
        panelFiltros.add(filtroSlider);

        barraImagenes.add(panelFiltros);

        panelTransformaciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Transformaciones"));
        panelTransformaciones.setRequestFocusEnabled(false);

        botonContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        botonContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteActionPerformed(evt);
            }
        });
        panelTransformaciones.add(botonContraste);

        botonLuminosidad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        botonLuminosidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLuminosidadActionPerformed(evt);
            }
        });
        panelTransformaciones.add(botonLuminosidad);

        botonOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        botonOscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOscurecerActionPerformed(evt);
            }
        });
        panelTransformaciones.add(botonOscurecer);

        botonCuadratica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cuadratica.png"))); // NOI18N
        botonCuadratica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCuadraticaActionPerformed(evt);
            }
        });
        panelTransformaciones.add(botonCuadratica);

        botonTrapezoidal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/trapecio.png"))); // NOI18N
        panelTransformaciones.add(botonTrapezoidal);
        panelTransformaciones.add(spinnerA);
        panelTransformaciones.add(spinnerB);

        barraImagenes.add(panelTransformaciones);

        panelRotacionEscalado.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotaci√≥n y escalado"));

        sliderRotacion.setMajorTickSpacing(90);
        sliderRotacion.setMaximum(360);
        sliderRotacion.setPaintTicks(true);
        sliderRotacion.setToolTipText("");
        sliderRotacion.setValue(0);
        sliderRotacion.setPreferredSize(new java.awt.Dimension(80, 40));
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        panelRotacionEscalado.add(sliderRotacion);

        bRotar90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        bRotar90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRotar90ActionPerformed(evt);
            }
        });
        panelRotacionEscalado.add(bRotar90);

        bRotar180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        bRotar180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRotar180ActionPerformed(evt);
            }
        });
        panelRotacionEscalado.add(bRotar180);

        bRotar270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        bRotar270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRotar270ActionPerformed(evt);
            }
        });
        panelRotacionEscalado.add(bRotar270);

        bDisminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        bDisminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDisminuirActionPerformed(evt);
            }
        });
        panelRotacionEscalado.add(bDisminuir);

        bAumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        bAumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAumentarActionPerformed(evt);
            }
        });
        panelRotacionEscalado.add(bAumentar);

        barraImagenes.add(panelRotacionEscalado);

        panelInferior.add(barraImagenes, java.awt.BorderLayout.PAGE_START);

        panelAuxiliar.add(panelInferior, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelAuxiliar, java.awt.BorderLayout.PAGE_END);
        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        menuArchivo.setText("Archivo");

        menuNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuNuevo.setText("Nuevo");
        menuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuNuevo);

        menuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuAbrir);

        menuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardar);

        barraMenu.add(menuArchivo);

        menuEdicion.setText("Ver");

        menuVerBarraEstado.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuVerBarraEstado.setText("Ver barra de estado");
        menuVerBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuVerBarraEstadoActionPerformed(evt);
            }
        });
        menuEdicion.add(menuVerBarraEstado);

        barraMenu.add(menuEdicion);

        menuImagen.setText("Imagen");

        menuRescaleOp.setText("Operador  RescaleOp");
        menuRescaleOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRescaleOpActionPerformed(evt);
            }
        });
        menuImagen.add(menuRescaleOp);

        menuConvolveOp.setText("Operador ConvolveOp");
        menuConvolveOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConvolveOpActionPerformed(evt);
            }
        });
        menuImagen.add(menuConvolveOp);

        menuAffineTransformOp.setText("Operador AffineTransformOp");
        menuAffineTransformOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAffineTransformOpActionPerformed(evt);
            }
        });
        menuImagen.add(menuAffineTransformOp);

        menuLookupOp.setText("Operador LookupOp");
        menuLookupOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLookupOpActionPerformed(evt);
            }
        });
        menuImagen.add(menuLookupOp);

        menuBandCombineOp.setText("Operador BandCombineOp");
        menuImagen.add(menuBandCombineOp);

        menuColorConvertOp.setText("Operador ColorConvertOp");
        menuImagen.add(menuColorConvertOp);

        barraMenu.add(menuImagen);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonTrazoLibreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTrazoLibreActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            formaActiva = Formas.TRAZO_LIBRE;
            vi.getLienzo2D().setFormaActiva(formaActiva);
        }
        if (barraEstadoActiva)
            labelEstado.setText("Trazo libre");
    }//GEN-LAST:event_botonTrazoLibreActionPerformed

    private void botonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLineaActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            formaActiva = Formas.LINEA;
            vi.getLienzo2D().setFormaActiva(formaActiva);
        }
        if (barraEstadoActiva)
            labelEstado.setText("Linea");
    }//GEN-LAST:event_botonLineaActionPerformed

    private void botonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectanguloActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            formaActiva = Formas.RECTANGULO;
            vi.getLienzo2D().setFormaActiva(formaActiva);
        }
        if (barraEstadoActiva)
            labelEstado.setText("Rectangulo");
    }//GEN-LAST:event_botonRectanguloActionPerformed

    private void botonElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonElipseActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            formaActiva = Formas.ELIPSE;
            vi.getLienzo2D().setFormaActiva(formaActiva);
        }
        if (barraEstadoActiva)
            labelEstado.setText("Elipse");
    }//GEN-LAST:event_botonElipseActionPerformed

    private void grosorSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorSpinnerStateChanged
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        vi.getLienzo2D().setGrosor((int) grosorSpinner.getValue());
        this.repaint();
    }//GEN-LAST:event_grosorSpinnerStateChanged

    private void botonCurvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCurvaActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            formaActiva = Formas.QUAD_CURVE;
            vi.getLienzo2D().setFormaActiva(formaActiva);
        }
        if (barraEstadoActiva)
            labelEstado.setText("Curva");
    }//GEN-LAST:event_botonCurvaActionPerformed

    private void menuVerBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuVerBarraEstadoActionPerformed
        barraEstadoActiva = !barraEstadoActiva;
        labelEstado.setText(" ");
    }//GEN-LAST:event_menuVerBarraEstadoActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage(true);
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_menuGuardarActionPerformed

    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo2D().setImage(img);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
                vi.addInternalFrameListener(mvi);
                vi.getLienzo2D().addLienzoListener(mlienzo);
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_menuAbrirActionPerformed

    private void menuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoActionPerformed
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        vi.addInternalFrameListener(mvi);
        vi.getLienzo2D().addLienzoListener(mlienzo);
        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = img.createGraphics();
        g2d.setPaint(Color.white);
        g2d.fillRect(0, 0, img.getWidth(), img.getHeight());
        vi.getLienzo2D().setImage(img);
    }//GEN-LAST:event_menuNuevoActionPerformed

    private void botonNuevoLienzoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoLienzoActionPerformed
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        vi.addInternalFrameListener(mvi);
        vi.getLienzo2D().addLienzoListener(mlienzo);
        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = img.createGraphics();
        g2d.setPaint(Color.white);
        g2d.fillRect(0, 0, img.getWidth(), img.getHeight());
        vi.getLienzo2D().setImage(img);

    }//GEN-LAST:event_botonNuevoLienzoActionPerformed

    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo2D().setImage(img);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
                vi.addInternalFrameListener(mvi);
                vi.getLienzo2D().addLienzoListener(mlienzo);
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_botonAbrirActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage(true);
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_botonGuardarActionPerformed

    private void botonMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMoverActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        vi.getLienzo2D().setMover(!vi.getLienzo2D().isMover());
        this.repaint();
    }//GEN-LAST:event_botonMoverActionPerformed

    private void botonRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRellenoActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        vi.getLienzo2D().setRelleno(!vi.getLienzo2D().isRelleno());
        this.repaint();
    }//GEN-LAST:event_botonRellenoActionPerformed

    private void botonTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTransparenciaActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        vi.getLienzo2D().setTrans_activa(!vi.getLienzo2D().isTrans_activa());
        this.repaint();
    }//GEN-LAST:event_botonTransparenciaActionPerformed

    private void botonAlisadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAlisadoActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        vi.getLienzo2D().setAlisado(!vi.getLienzo2D().isAlisado());
        this.repaint();
    }//GEN-LAST:event_botonAlisadoActionPerformed

    private void botonVolcadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVolcadoActionPerformed
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        vi.getLienzo2D().setVolcado(!vi.getLienzo2D().isVolcado());
    }//GEN-LAST:event_botonVolcadoActionPerformed

    private void seleccionColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionColorActionPerformed
        Color colorSelecionado = (Color) seleccionColor.getSelectedItem();
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        vi.getLienzo2D().setColor(colorSelecionado);
        this.repaint();
    }//GEN-LAST:event_seleccionColorActionPerformed

    private void menuRescaleOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRescaleOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    RescaleOp rop = new RescaleOp(1.0F, 10.0F, null);
                    rop.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_menuRescaleOpActionPerformed

    private void menuConvolveOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConvolveOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
                    Kernel k = new Kernel(3, 3, filtro);
                    ConvolveOp cop = new ConvolveOp(k);

                    BufferedImage imgdest = cop.filter(img, null); // Al operador de convolucion no se puede almacenar en la misma imagen
                    vi.getLienzo2D().setImage(imgdest);
                    
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_menuConvolveOpActionPerformed

    private void brilloSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_brilloSliderFocusGained

    private void brilloSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloSliderStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            if (imgFuente != null) {
                try {
                    RescaleOp rop = new RescaleOp(1.0F, brilloSlider.getValue(), null);
                    rop.filter(imgFuente, vi.getLienzo2D().getImage());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_brilloSliderStateChanged

    private void brilloSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusLost
        imgFuente = null;
        brilloSlider.setValue(0);
    }//GEN-LAST:event_brilloSliderFocusLost

    private void comboFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFiltrosActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            Kernel k = getKernel(comboFiltros.getSelectedIndex());
            if (img != null && k != null) {
                try {
                    ConvolveOp cop = new ConvolveOp(k);

                    BufferedImage imgdest = cop.filter(img, null); // Al operador de convolucion no se puede almacenar en la misma imagen
                    vi.getLienzo2D().setImage(imgdest);
                    
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_comboFiltrosActionPerformed

    private void contrasteSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contrasteSliderFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }

    }//GEN-LAST:event_contrasteSliderFocusGained

    private void contrasteSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_contrasteSliderStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            if (imgFuente != null) {
                try {
                    RescaleOp rop = new RescaleOp(contrasteSlider.getValue()/10.0F, brilloSlider.getValue(), null);
                    rop.filter(imgFuente, vi.getLienzo2D().getImage());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_contrasteSliderStateChanged

    private void contrasteSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contrasteSliderFocusLost
        imgFuente = null;
        contrasteSlider.setValue(10);
    }//GEN-LAST:event_contrasteSliderFocusLost

    private void filtroSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filtroSliderFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_filtroSliderFocusGained

    private void filtroSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_filtroSliderStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            if (imgFuente != null) {
                try {
                    int tamanio = filtroSlider.getValue();
                    float filtro[] = new float[tamanio*tamanio];
                    for(int i = 0; i<tamanio*tamanio; i++){
                        filtro[i] = (float)1/tamanio;
                    }
                    
                    Kernel k = new Kernel(tamanio, tamanio, filtro);
                    ConvolveOp cop = new ConvolveOp(k);

                    BufferedImage imgdest = cop.filter(imgFuente, null); // Al operador de convolucion no se puede almacenar en la misma imagen
                    vi.getLienzo2D().setImage(imgdest);
                    
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }              
            }
        }
    }//GEN-LAST:event_filtroSliderStateChanged

    private void filtroSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filtroSliderFocusLost
        imgFuente = null;
        filtroSlider.setValue(1);
    }//GEN-LAST:event_filtroSliderFocusLost

    private void menuAffineTransformOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAffineTransformOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(1.5, 1.5);
                    AffineTransformOp atop = new AffineTransformOp(at, null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_menuAffineTransformOpActionPerformed

    private void menuLookupOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLookupOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    byte funcionT[] = new byte[256];
                    for (int x = 0; x < 256; x++) {
                        funcionT[x] = (byte) (255 - x); // Negativo
                    }
                    LookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);
                    
                    img = ImageTools.convertImageType(img, BufferedImage.TYPE_INT_ARGB); // Asegura la compatibilidad con el LookUpOp
                    
                    BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    
    }//GEN-LAST:event_menuLookupOpActionPerformed

    private void botonContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    int type = LookupTableProducer.TYPE_SFUNCION;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonContrasteActionPerformed

    private void botonLuminosidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLuminosidadActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    int type = LookupTableProducer.TYPE_LOGARITHM;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonLuminosidadActionPerformed

    private void botonOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOscurecerActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    int type = LookupTableProducer.TYPE_POWER;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonOscurecerActionPerformed

    private void botonCuadraticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCuadraticaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    LookupTable lt = this.cuadratica(128);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(img, img); // Imagen origen y destino iguales
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonCuadraticaActionPerformed

    private void bRotar90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRotar90ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    double r = Math.toRadians(90);
                    Point p = new Point(img.getWidth() / 2, img.getHeight() / 2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bRotar90ActionPerformed

    private void bRotar180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRotar180ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    double r = Math.toRadians(180);
                    Point p = new Point(img.getWidth() / 2, img.getHeight() / 2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bRotar180ActionPerformed

    private void bRotar270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRotar270ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    double r = Math.toRadians(270);
                    Point p = new Point(img.getWidth() / 2, img.getHeight() / 2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bRotar270ActionPerformed

    private void bAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAumentarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                    AffineTransformOp atop = new AffineTransformOp(at, null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bAumentarActionPerformed

    private void bDisminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDisminuirActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                    AffineTransformOp atop = new AffineTransformOp(at, null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bDisminuirActionPerformed

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            this.imgFuente = vi.getLienzo2D().getImage();
        }
    }//GEN-LAST:event_sliderRotacionFocusGained

    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    double r = Math.toRadians(this.sliderRotacion.getValue());
                    Point p = new Point(imgFuente.getWidth() / 2, imgFuente.getHeight() / 2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgFuente, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        imgFuente = null;
        sliderRotacion.setValue(0);
    }//GEN-LAST:event_sliderRotacionFocusLost

    private Kernel getKernel(int seleccion){
        Kernel k = null;
        int tipoKernel = 0;
        
        switch(seleccion){
            case 0:
                tipoKernel = KernelProducer.TYPE_MEDIA_3x3;
                break;
            case 1:
                tipoKernel = KernelProducer.TYPE_BINOMIAL_3x3;
                break;
            case 2:
                tipoKernel = KernelProducer.TYPE_LAPLACIANA_3x3;
                break;
            case 3:
                tipoKernel = KernelProducer.TYPE_RELIEVE_3x3;
                break;
            case 4:
                tipoKernel = KernelProducer.TYPE_ENFOQUE_3x3;
                break;
            case 5:
                tipoKernel = KernelProducer.TYPE_SOBELX_3x3;
                break;
            case 6:
                tipoKernel = KernelProducer.TYPE_SOBELY_3x3;
                break;
                  
        }   
        
        k = KernelProducer.createKernel(tipoKernel);
        
        return k;
    }
    
    public LookupTable cuadratica(double m){
        double Max;
        if(m>=128){
            Max = (byte) ((1.0 / 100.0)*Math.pow(0.0 - m, 2));
        }
        else{
            Max = (byte) ((1.0 / 100.0)*Math.pow(255.0 - m, 2));
        }
        double K = 255.0 / Max;
        byte lt[] = new byte[256];
        for (int x = 0; x < 256; x++) {
            lt[x] = (byte) (K*((1.0 / 100.0)*Math.pow((double)x - m, 2)));
        }
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }
    
    private class ManejadorVentanaInterna extends InternalFrameAdapter {

        @Override
        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            VentanaInterna vi = (VentanaInterna) evt.getInternalFrame();

            botonRelleno.setSelected(vi.getLienzo2D().isRelleno());
            botonTransparencia.setSelected(vi.getLienzo2D().isTrans_activa());
            botonAlisado.setSelected(vi.getLienzo2D().isAlisado());
            botonMover.setSelected(vi.getLienzo2D().isMover());
            grosorSpinner.setValue((int) vi.getLienzo2D().getGrosor());
            botonVolcado.setSelected(vi.getLienzo2D().isVolcado());
            
            switch(vi.getLienzo2D().getFormaActiva()){
                case TRAZO_LIBRE:
                    botonTrazoLibre.setSelected(true);
                    break;
                case RECTANGULO:
                    botonRectangulo.setSelected(true);
                    break;
                case LINEA:
                    botonLinea.setSelected(true);
                    break;
                case ELIPSE:
                    botonElipse.setSelected(true);
                    break;
                case QUAD_CURVE:
                    botonCurva.setSelected(true);
                    break;
                
            }
            

        }
    }

    private class ManejadorLienzo extends LienzoAdapter {

        @Override
        public void shapeAdded(LienzoEvent evt) {
            listaFiguras.addItem(evt.getForma());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAumentar;
    private javax.swing.JButton bDisminuir;
    private javax.swing.JButton bRotar180;
    private javax.swing.JButton bRotar270;
    private javax.swing.JButton bRotar90;
    private javax.swing.JToolBar barraHerramientas;
    private javax.swing.JToolBar barraImagenes;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JToggleButton botonAlisado;
    private javax.swing.JButton botonContraste;
    private javax.swing.JButton botonCuadratica;
    private javax.swing.JToggleButton botonCurva;
    private javax.swing.JToggleButton botonElipse;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JToggleButton botonLinea;
    private javax.swing.JButton botonLuminosidad;
    private javax.swing.JToggleButton botonMover;
    private javax.swing.JButton botonNuevoLienzo;
    private javax.swing.JButton botonOscurecer;
    private javax.swing.JToggleButton botonRectangulo;
    private javax.swing.JToggleButton botonRelleno;
    private javax.swing.JToggleButton botonTransparencia;
    private javax.swing.JToggleButton botonTrapezoidal;
    private javax.swing.JToggleButton botonTrazoLibre;
    private javax.swing.JToggleButton botonVolcado;
    private javax.swing.JSlider brilloSlider;
    private javax.swing.JComboBox<String> comboFiltros;
    private javax.swing.JSlider contrasteSlider;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JSlider filtroSlider;
    private javax.swing.JSpinner grosorSpinner;
    private javax.swing.ButtonGroup herramientas;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JLabel labelEstado;
    private javax.swing.JComboBox<Shape> listaFiguras;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenuItem menuAffineTransformOp;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuItem menuBandCombineOp;
    private javax.swing.JMenuItem menuColorConvertOp;
    private javax.swing.JMenuItem menuConvolveOp;
    private javax.swing.JMenu menuEdicion;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenu menuImagen;
    private javax.swing.JMenuItem menuLookupOp;
    private javax.swing.JMenuItem menuNuevo;
    private javax.swing.JMenuItem menuRescaleOp;
    private javax.swing.JMenuItem menuVerBarraEstado;
    private javax.swing.JPanel panelAuxiliar;
    private javax.swing.JPanel panelBrilloContraste;
    private javax.swing.JPanel panelFiltros;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelRotacionEscalado;
    private javax.swing.JPanel panelTransformaciones;
    private javax.swing.JComboBox<Color> seleccionColor;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JSpinner spinnerA;
    private javax.swing.JSpinner spinnerB;
    // End of variables declaration//GEN-END:variables
}
